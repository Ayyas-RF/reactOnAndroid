  align-items: center;
  justify-content: space-between;
  margin-bottom: 10px;
  border-radius: 5px;
  max-width: 100%;
  padding: 0 10px;
}

input {
  width: 90%;
  padding: 15px;
  border: none;
  border-radius: 5px;
  margin-bottom: 20px;
}

p {
  display: block;
  max-width: 180px;
  overflow: hidden;
  text-overflow: ellipsis;
}


Open the index.css file and paste the below styles in the file and save it.



:root {
  font-family: Inter, system-ui, Avenir, Helvetica, Arial, sans-serif;
  line-height: 1.5;
  font-weight: 400;

  color-scheme: light dark;
  color: rgba(255, 255, 255, 0.87);
  background-color: #242424;
}

body {
  margin: 0;
  display: flex;
  min-width: 320px;
  width: 100vw;
  text-align: center;
  min-height: 100vh;
}

h1 {
  font-size: 3.2em;
  line-height: 1.1;
}

button {
  border-radius: 8px;
  border: 1px solid transparent;
  padding: 0.2em .6em;
  font-size: 1em;
  font-weight: 500;
  font-family: inherit;
  background-color: #1a1a1a;
  color: red;
  cursor: pointer;
  transition: border-color 0.25s;
}

button:hover {
  border-color: #646cff;
}

button:focus,
button:focus-visible {
  outline: 4px auto -webkit-focus-ring-color;
}

@media (prefers-color-scheme: light) {
  :root {
    color: #213547;
    background-color: #ffffff;
  }

  button {
    background-color: #f9f9f9;
  }
}


If you have followed the instructions correctly, you should be seeing the image below in your browser.

A screenshot of the Todo app interface

Configuring Git and GitHub
GitHub is the most popular web-based hosting platform for git repositories. You need to install and configure git before you can push your repositories to GitHub from Termux. Follow the steps below to configure git, and connect to GitHub:

Step 1: Install git and gh

GIT is a widely-used version control system commonly used for software development and other collaborative projects.
While gh helps us to access GitHub features such as pull requests, issues, and other GitHub concepts from the termux terminal.

Stop the development server by pressing ctrl + c on your keyboard. Then run the command below to install git and gh:



pkg install git gh


Step 2: Adding Git user Credentials

To use git, you first have to tell git who you are by adding your user credentials to git. Run the following command to add your username and email address to git:



#To setup git username
git config --global user.name <your_username>

#To confirm
git config --global user.name

#To setup git email
#It must be the same as the email 
#associated with your github account
git config --global user.email <your_email>

#To confirm
git config --global user.email


Step 3: Initialize git

Run the following commands to initialize and commit your files to git



#Initialize git
git init

#To add your files to git
git add .

#To commit all changes to git
git commit -m "initial commit"


Step 4: Authenticate with GitHub

Run the command below to authenticate your account:



gh auth login


Follow the prompts to authenticate your account with GitHub.

Step 5: Push your local repository to GitHub

To add your local repository to GitHub, simply follow the instructions here.

If you followed the instructions correctly, your project should show up on your GitHub repository once you refresh your browser.

Debugging the Application
Let's learn how to debug a React application on an Android device by making the the delete button functional.

Open the TodoItem.jsx file, paste the below code into it, and save the file.



const handleDeleteTodo = (id) => {
    setTodos((prevTodos) => prevTodos.filter(todo => id !== todo.id))
  }


The TodoItem.jsx file should now contain the below code:



function TodoItem({todo}) {

  const handleDeleteTodo = (id) => {
    setTodos((prevTodos) => prevTodos.filter(todo => id !== todo.id))
  }

  return (
      <li key={todo.id}>
        <p>{todo.title}</p>
        <button onClick={() => handleDeleteTodo(todo.id)}>Delete</button>
      </li>
    )
}

export default TodoItem


If you click on the delete button, you will notice that the todo doesn't get deleted as expected because of an error in our code. Typically, when you encounter a bug when building a web application on a computer, you will open up your browser DevTools to find error messages logged to the console that will help you in fixing the bug. However, since you are developing on an Android Phone without access to the traditional browser DevTools, how do you debug the issue?. You can debug your React application using your Android phone by following the below steps:

Step 1: Download Eruda

Eruda is a browser-like application that gives you access to traditional browser DevTools found on computers through your Android phone. You can download the application from the google play store

Step 2: Open the development url in the Eruda browser

Simply copy the development url from your device browser and open it in the Eruda browser application.

Step 3: Click on the delete button

When you click on the delete button, you will notice that a devtool opens up in the Eruda browser with an error message logged to the Eruda console. The Eruda browser devtool contains the essential tools you will need to help debug your application on Android.

A gif showing the Eruda devtool opening when I clicked on the delete button

Step 4: Fixing the bug

According to the error message in the console, the delete button is not functioning as expected because the setTodos function used in the handleDeleteTodo is not defined. To fix the error, you simply have to pass the the setTodos function as a prop from the App component to the Todo component



import { useState } from "react"
import Input from "./Components/Input"
import Todos from "./Components/Todos"
import './App.css';

const INITIAL_TODO = [
    {
      id: crypto.randomUUID(),
      title: "Type your first todo"
    }
  ]

function App() {
  const [todos, setTodos] = useState(INITIAL_TODO)

  return (
    <div>
      <h1>Todo App</h1>
      <Input setTodos={setTodos} />
      {/*Passed the setTodos function as a 
      prop to the Todos component*/}
      <Todos todos={todos} setTodos={setTodos} />
    </div>
  )
}

export default App



And then you also pass the setTodos function as a prop to the TodoItem component as well:



import TodoItem from "./TodoItem"

function Todos({todos, setTodos}){

  return (
      <ul>
      {/*Passed the setTodos function to the 
      TodoItem Component*/}
        {todos.map((todo) => <TodoItem key={todo.id} todo={todo} setTodos={setTodos} />)}
      </ul>
    )
}

export default Todos


The TodoItem component should now look like this:



function TodoItem({todo, setTodos}) {

  const handleDeleteTodo = (id) => {
    setTodos((prevTodos) => prevTodos.filter(todo => id !== todo.id))
  }

  return (
      <li key={todo.id}>
        <p>{todo.title}</p>
        <button onClick={() => handleDeleteTodo(todo.id)}>Delete</button>
      </li>
    )
}

export default TodoItem


The delete button should now work as expected.

A Gif showing a functioning delete button

Conclusion
Building web applications on an Android phone is not an easy task. Depending on your chosen Android code editor, you might miss the auto-completion, IntelliSense, and other powerful features typically found in desktop code editors. However, I hope that the knowledge you've gained in this article – from building React applications to sharing them on GitHub and debugging your React applications on an Android phone – has made it a little bit easier.

👋 Before you go

Do your career a favor. Join DEV. (The website you're on right now)

It takes one minute, it's free, and is worth it for your career.

Get started

Top comments (9)
Subscribe
pic
Add to the discussion
 
 
mgtv_s profile image
Dmitrii
•
Aug 15

Thanks for article, very great! I recently read article about how much it would cost to develop on react native, i think it may be useful :)


1
Like
 
 
lui2mi profile image
Luis Miguel Meza Mendoza
•
Nov 14 '23

Great guide! and I have a question. Idk if is only happening to me.
after "pkg install nodejs" gives me an error "CANNOT LINK EXECUTABLE "node": library "libicui18n.so.73" not found" on a fresh install


1
Like
 
 
andrewezeani profile image
Andrew Ezeani
•
Nov 15 '23

It seems like a dependency issue. You can try uninstalling your termux if it's installed from the Google playstore and download one from fdroid. If that doesn't solve the issue, try running pkg update && pkg upgrade to upgrade your termux to the latest version. Then try running the command again. If it doesn't work, then it probably has something to do with the version of your device.


1
Like
 
 
lui2mi profile image
Luis Miguel Meza Mendoza
•
Nov 16 '23

Thanks for reply, indeed I had to update and upgrade, but also install git, openssl-tool, build-essential, python and proot, to make it work


2
Like
 
 
lqdm12 profile image
Leonard Mendonça
•
Nov 4 '23

Thank you so much for the guide! I'm happy because I can use reactjs on my cellphone now :D


1
Like
 
 
andrewezeani profile image
Andrew Ezeani
•
Nov 4 '23

You're welcome. I'm glad you found it helpful


2
Like
 
 
apolizy profile image
Emmanuel precious omonigho
•
Dec 4 '23

Please how do I use it for a website I'm creating ?


Like
 
 
andrewezeani profile image
Andrew Ezeani
•
Dec 4 '23

If it's a React application, it'll be by Following the steps outlined in the article


1
Like
 
 
royal_gamer_6014f452b95b0 profile image
Royal gamer
•
Sep 9

Thank you so much But I use Speck node editor which is very good, you can try it


1
Like
Code of Conduct • Report abuse
DEV Community

Trending in React
The React community is discussing the new React Native architecture, exploring Virtual DOM performance, and comparing Redux with React Query for state management.

hellonehha 
React Native New Architecture
Neha Sharma ・ Nov 9
#react #reactnative #javascript #webdev
sonaykara 
Why Virtual DOM: Render and Performance
Sonay Kara ・ Nov 1
#react #javascript #programming #webdev
amenibensaada 
Client-Side Rendering and SPAs in Web Development🌐
Ameni Ben Saada ・ Nov 4
#javascript #frontend #react #webdev
truongpx396 
⚡🚀 ReactJS, TypeScript, Vite with Redux and TanStack (React Query) In Practice ⚛️
Truong Phung ・ Nov 13
#webdev #javascript #react #tutorial
myogeshchavan97 
Top 25 React Tips Every Developer Should Know — Part 2
Yogesh Chavan ・ Nov 8
#react #javascript
Read next
sshamza profile image
The Removal of Bridging in React Native: An In-Depth Analysis
Hamza Nadeem - Oct 30

steve8708 profile image
Introducing Visual Copilot 2.0: Design to Interactive
Steve Sewell - Oct 31

magsimuhammadessa profile image
Exploring ChatGPT's New Search Feature: A Powerful Tool for Real-Time Information
Muhammad Essa - Nov 3

jagroop2001 profile image
Why Does JavaScript’s parseInt(0.0000005) Print “5”? 🤔
Jagroop Singh - Nov 10


Andrew Ezeani
Follow
Technical writer | Frontend Developer
Location
Lagos, Nigeria
Joined
Feb 12, 2023
More from Andrew Ezeani
Bugs, Errors, and Lessons: A Beginner's Debugging Experience
#webdev #javascript #beginners #react
How To Create Absolute Imports In Vite React App: A step-by-step Guide
#webdev #react #tutorial #beginners


:root {
  font-family: Inter, system-ui, Avenir, Helvetica, Arial, sans-serif;
  line-height: 1.5;
  font-weight: 400;

  color-scheme: light dark;
  color: rgba(255, 255, 255, 0.87);
  background-color: #242424;
}

body {
  margin: 0;
  display: flex;
  min-width: 320px;
  width: 100vw;
  text-align: center;
  min-height: 100vh;
}

h1 {
  font-size: 3.2em;
  line-height: 1.1;
}

button {
  border-radius: 8px;
  border: 1px solid transparent;
  padding: 0.2em .6em;
  font-size: 1em;
  font-weight: 500;
  font-family: inherit;
  background-color: #1a1a1a;
  color: red;
  cursor: pointer;
  transition: border-color 0.25s;
}

button:hover {
  border-color: #646cff;
}

button:focus,
button:focus-visible {
  outline: 4px auto -webkit-focus-ring-color;
}

@media (prefers-color-scheme: light) {
  :root {
    color: #213547;
    background-color: #ffffff;
  }

  button {
    background-color: #f9f9f9;
  }